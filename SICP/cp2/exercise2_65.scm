#lang sicp

(define (entry tree) (car tree))

(define (left-branch tree) (cadr tree))

(define (right-branch tree) (caddr tree))

(define (make-tree entry left right)
  (list entry left right))

(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((= x (entry set)) #t)
        ((< x (entry set))
         (element-of-set? x (left-branch set)))
        ((> x (entry set))
         (element-of-set? x (right-branch set)))))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
        ((= x (entry set)) set)
        ((< x (entry set))
         (make-tree (entry set)
                    (adjoin-set x (left-branch set))
                    (right-branch set)))
        ((> x (entry set))
         (make-tree (entry set)
                    (left-branch set)
                    (adjoin-set x (right-branch set))))))

(define (tree->list tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (intersection-set set1 set2)
  (define (iter l1 l2)
    (if (or (null? l1) (null? l2)) 
        '()
        (let ((x1 (car l1))
              (x2 (car l2)))
          (cond ((= x1 x2) (cons x1 (iter (cdr l1) (cdr l2))))
                ((< x1 x2) (iter (cdr l1) l2))
                ((> x1 x2) (iter l1 (cdr l2)))))))
  (let ((list1 (tree->list set1))
        (list2 (tree->list set2)))
    (list->tree (iter list1 list2))))

(define (union-set set1 set2)
  (define (iter l1 l2)
    (cond ((null? l1) l2)
          ((null? l2) l1)
          (else (let ((x1 (car l1)) (x2 (car l2)))
                  (cond ((= x1 x2)
                        (cons x1 (iter (cdr l1) (cdr l2))))
                        ((< x1 x2) (cons x1 (iter (cdr l1) l2)))
                        (else (cons x2 (iter l1 (cdr l2)))))))))
  (let ((list1 (tree->list set1))
        (list2 (tree->list set2)))
    (list->tree (iter list1 list2))))

(define tree1 (list->tree (list 1 2 3 4 5 6 7 8 9)))
(define tree2 (list->tree (list 2 4 6 8 10)))
(display (intersection-set (union-set tree1 tree2) tree2))
(newline)
(display (union-set tree1 tree2))
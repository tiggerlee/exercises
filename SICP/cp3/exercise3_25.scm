#lang sicp

(define (lookup keys table)
  (if (list? keys)
      (let ((current-key (car keys))
            (remain-keys (cdr keys)))
        (let ((records (assoc current-key (cdr table))))
          (cond ((and records (null? remain-keys))
                  (cdr records))
                ((and records (not (null? remain-keys)))
                  (lookup remain-keys records))
                ((not records)
                  #f))))
      (error "Lookup expect keys as a list" keys)))

(define (join-in-table new-record table)
  (set-cdr! table 
            (cons new-record (cdr table)))
  table)

(define (insert! keys value table)
  (if (list? keys)
      (let ((current-key (car keys))
            (remain-keys (cdr keys)))
        (let ((records (assoc current-key (cdr table))))
          (display records)
          (newline)
          (cond ((and (not records) (not (null? remain-keys)))
                  (insert! keys value (join-in-table (cons current-key nil) table))
                  table)
                ((and (not records) (null? remain-keys))
                  (join-in-table (cons current-key value) table)
                  table)
                ((and records (null? remain-keys))
                  (set-cdr! records value)
                  table)
                ((and records (not (null? remain-keys)))
                  (insert! remain-keys value records)
                  table))))
      (error "Insert! expect keys as a list" keys)))

(define (make-table)
  (list '*table*))

(define t (make-table))
(lookup (list 'a 'b) t)
(insert! (list 'a 'b) 3 t)
(lookup (list 'a 'b) t)
(insert! (list 'c 'd 'e) 5 t)
(lookup (list 'c 'd 'e) t)
(insert! (list 'g) 6 t)
(lookup (list 'g) t)